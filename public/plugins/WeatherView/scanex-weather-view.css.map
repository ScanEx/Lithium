{
  "version": 3,
  "file": "scanex-weather-view.css",
  "sources": [
    "..\\src\\LayerSwitch.html",
    "..\\src\\Forecast.html"
  ],
  "sourcesContent": [
    "<div class=\"weather-view-layers\">\r\n    <div class=\"mode-selector\">\r\n        <label>{translate('mode')}</label>\r\n        <select bind:value=$mode>\r\n            {#each modes as x }\r\n                <option value=\"{x}\">{x.toUpperCase()}</option>\r\n            {/each}\r\n        </select>\r\n    </div>    \r\n    <ul>\r\n        {#each layers as x, i}\r\n            <li on:click=\"toggle(i)\">\r\n                <i class=\"layer-bullet{ i === $active ? ' layer-bullet-active' : ' layer-bullet-inactive' }\"></i>\r\n                <i class=\"layer-icon {i === $active ? `weather-view-${x}-active` : `weather-view-${x}-inactive`}\"></i>\r\n                <label class=\"layer-title{ i === $active ? ' layer-title-active' : '' }\">{translate(x)}</label>\r\n            </li>\r\n        {/each}\r\n    </ul>\r\n    {#if $active >= 0}\r\n    <div class=\"legend\">\r\n        <i class=\"{legend}\"></i>\r\n    </div>   \r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n    .weather-view-layers * {\r\n        cursor: pointer; \r\n        color: #738694;\r\n        font-family: 'Roboto', sans-serif;\r\n        font-size: 14px;\r\n    }\r\n    .weather-view-layers .mode-selector {\r\n        background-color: #EBF1F5;        \r\n        padding: 30px 15px 30px 15px;\r\n    }\r\n    .weather-view-layers .mode-selector label,\r\n    .weather-view-layers .mode-selector select {\r\n        vertical-align: middle;\r\n    }    \r\n    .weather-view-layers .mode-selector select {\r\n        width: 205px;\r\n        height: 40px;\r\n        margin-left: 20px;\r\n    }\r\n    .weather-view-layers ul {        \r\n        padding: 20px 15px 15px 15px;\r\n        border: 1px solid #D8E1E8;\r\n        border-radius: 4px;\r\n    }\r\n    .weather-view-layers li {\r\n        padding: 5px 5px 5px 5px;\r\n    }\r\n    .weather-view-layers .layer-bullet,\r\n    .weather-view-layers .layer-icon {\r\n        display: inline-block;               \r\n        background-repeat: no-repeat;\r\n        background-color: transparent;\r\n        width: 16px;\r\n        height: 16px;\r\n        vertical-align: middle;\r\n    }\r\n    .weather-view-layers .layer-icon {\r\n        margin-left: 15px;\r\n    }\r\n    .weather-view-layers .layer-title {\r\n        margin-left: 5px;\r\n        vertical-align: middle;\r\n    }\r\n    .weather-view-layers .weather-view-tmp-inactive {\r\n        background-image: url('tmp.png');        \r\n    }\r\n    .weather-view-layers .weather-view-tmp-active {\r\n        background-image: url('tmp-active.png');        \r\n    }\r\n    .weather-view-layers .weather-view-wind-inactive {\r\n        background-image: url('wind.png');\r\n    }\r\n    .weather-view-layers .weather-view-wind-active {\r\n        background-image: url('wind-active.png');\r\n    }\r\n    .weather-view-layers .weather-view-precip-inactive {\r\n        background-image: url('precip.png');        \r\n    }\r\n    .weather-view-layers .weather-view-precip-active {\r\n        background-image: url('precip-active.png');        \r\n    }\r\n    .weather-view-layers .weather-view-gust-inactive {\r\n        background-image: url('gust.png');        \r\n    }\r\n    .weather-view-layers .weather-view-gust-active {\r\n        background-image: url('gust-active.png');\r\n    }\r\n    .weather-view-layers .weather-view-pressure-inactive {\r\n        background-image: url('pressure.png');        \r\n    }\r\n    .weather-view-layers .weather-view-pressure-active {\r\n        background-image: url('pressure-active.png');\r\n    }\r\n    .weather-view-layers .weather-view-cloud-inactive {\r\n        background-image: url('cloud.png');        \r\n    }\r\n    .weather-view-layers .weather-view-cloud-active {\r\n        background-image: url('cloud-active.png');        \r\n    }\r\n    .weather-view-layers .weather-view-rh-inactive {\r\n        background-image: url('rh.png');        \r\n    }\r\n    .weather-view-layers .weather-view-rh-active {\r\n        background-image: url('rh-active.png');        \r\n    }\r\n    .weather-view-layers .weather-view-dewpoint-inactive {\r\n        background-image: url('dewpoint.png');        \r\n    }\r\n    .weather-view-layers .weather-view-dewpoint-active {\r\n        background-image: url('dewpoint-active.png');\r\n    }\r\n    .weather-view-layers .layer-bullet-inactive {        \r\n        background-image: url('ellipse.png');        \r\n    }\r\n    .weather-view-layers .layer-bullet-active {        \r\n        background-image: url('ellipse-active.png');\r\n    }    \r\n    .weather-view-layers .layer-title-active {\r\n        color: #48AFF0;\r\n    }\r\n    .weather-view-layers ul,\r\n    .weather-view-layers .legend {\r\n        margin: 15px;\r\n    }\r\n    .weather-view-layers .legend-icon {\r\n        display: inline-block;               \r\n        background-repeat: no-repeat;\r\n        background-color: transparent;\r\n        width: 320px;\r\n        height: 80px;\r\n        vertical-align: middle;\r\n    }\r\n    .weather-view-layers .legend-tmp {\r\n        background-image: url('legend-tmp.png');\r\n    }\r\n    .weather-view-layers .legend-wind {\r\n        background-image: url('legend-wind.png');\r\n    }\r\n    .weather-view-layers .legend-precip {\r\n        background-image: url('legend-precip.png');\r\n    }\r\n    .weather-view-layers .legend-rh {\r\n        background-image: url('legend-rh.png');\r\n    }\r\n    .weather-view-layers .legend-pressure {\r\n        background-image: url('legend-pressure.png');\r\n    }\r\n    .weather-view-layers .legend-dewpoint {\r\n        background-image: url('legend-dewpoint.png');\r\n    }\r\n    .weather-view-layers .legend-cloud {\r\n        background-image: url('legend-cloud.png');\r\n    }\r\n</style>\r\n\r\n<script>\r\n    const T = window.nsGmx.Translations;    \r\n    import { \r\n        translate,\r\n        FORECAST_PERIOD_HOURS,\r\n        FORECAST_HOURS_STEP,\r\n        FORECAST_MODES,\r\n        FORECAST_HOURS,\r\n        WEATHER_LAYERS,\r\n        get_wms_now,\r\n        pad_left,\r\n    } from './Utils.js';\r\n\r\n    T.addText('rus', {\r\n        mode: 'Выбор модели',\r\n        now: 'Сейчас',\r\n    });\r\n\r\n    T.addText('eng', {\r\n        mode: 'Select model',\r\n        now: 'Now',\r\n    });\r\n    \r\n    const baseUrl = 'http://95.163.250.203:9898/maritime/v2.0/ogc/wms';\r\n    const format = 'image/png';\r\n\r\n    const pad = h => pad_left (h, '0', 3);\r\n\r\n    export default {\r\n        data () {\r\n            return {\r\n                modes: FORECAST_MODES,\r\n                layers: WEATHER_LAYERS,                            \r\n            };\r\n        },\r\n        computed: {\r\n            legend: ({$active}) => $active >= 0 ? `legend-icon legend-${WEATHER_LAYERS[$active]}` : ''\r\n        },\r\n        oncreate () {\r\n            this._layer = null;\r\n            const listener = this.store.on('state', state => {\r\n                const { current: { mode, active, moment } } = state;\r\n                if (this._layer) {\r\n                    nsGmx.leafletMap.removeLayer (this._layer);\r\n                }\r\n                if (0 <= active && active < WEATHER_LAYERS.length) {\r\n                    const name = WEATHER_LAYERS[active];\r\n                    if (moment < 0) {\r\n                        const {lat, lng} = nsGmx.leafletMap.getCenter();\r\n                        get_wms_now (mode, lat, lng, new Date())\r\n                        .then(moment => {\r\n                            const h = FORECAST_HOURS[moment].toString();\r\n                            this._layer = L.tileLayer.wms(`${baseUrl}/${mode}/${name}/${h}/`, { layers: `${name}_f${pad(h)}`, format, transparent: true });\r\n                            nsGmx.leafletMap.addLayer (this._layer);\r\n                        })\r\n                        .catch(e => console.log);\r\n                    }\r\n                    else {\r\n                        const h = FORECAST_HOURS[moment].toString();\r\n                        this._layer = L.tileLayer.wms(`${baseUrl}/${mode}/${name}/${FORECAST_HOURS[moment]}/`, { layers: `${name}_f${pad(h)}`, format, transparent: true });\r\n                        nsGmx.leafletMap.addLayer (this._layer);\r\n                    }                              \r\n                }\r\n            });\r\n            this.on('destroy', () => {\r\n                listener.cancel();\r\n            });\r\n        },\r\n        ondestroy () {            \r\n        },        \r\n        methods: {\r\n            toggle (index) {\r\n                const { active } = this.store.get();\r\n                if (index === active) {                    \r\n                    this.store.set({active: -1});\r\n                }\r\n                else {                    \r\n                    this.store.set({active: index});\r\n                }\r\n            }\r\n        },       \r\n        helpers: {            \r\n            translate,            \r\n        },\r\n    };\r\n</script>",
    "<div ref:container class=\"weather-view-container\">\r\n    <div class=\"weather-view-params\">\r\n        <table>\r\n            <tr>\r\n                <td on:click=\"hide()\" class=\"weather-view-close\">\r\n                    <i></i>\r\n                </td>\r\n                <td class=\"weather-view-current-spot\" colspan=\"2\"><span>{format_coord(latLng)}</span><i></i></td>                \r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('units.hours')}</td>\r\n                <td class=\"weather-view-param-unit\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('tmp')}</td>\r\n                <td class=\"weather-view-param-unit\">{translate('units.d')}</td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('wind')}</td>\r\n                <td class=\"weather-view-param-unit\">{translate('units.ms')}</td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('direction')}</td>\r\n                <td class=\"weather-view-param-unit\"></td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('gust')}</td>\r\n                <td class=\"weather-view-param-unit\">{translate('units.ms')}</td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('precip')}</td>\r\n                <td class=\"weather-view-param-unit\">{translate('units.mm')}</td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('rh')}</td>\r\n                <td class=\"weather-view-param-unit\">%</td>\r\n            </tr>\r\n            <tr>\r\n                <td></td>\r\n                <td class=\"weather-view-param\">{translate('pressure')}</td>\r\n                <td class=\"weather-view-param-unit\">{translate('units.mmhg')}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"weather-view-values\">\r\n        <table>\r\n            <tr>        \r\n                {#each days as d}\r\n                    <td colspan=\"{hours.length}\" class=\"weather-view-day weather-view-margin-cell\">\r\n                        {d && d.toLocaleDateString() || ''}\r\n                    </td>\r\n                {/each}                \r\n            </tr>\r\n            <tr>\r\n                {#each days as d, i}\r\n                    {#each hours as h, j}\r\n                        <td on:click=\"selectHour(d,h,i,j)\" class=\"weather-view-hour {j % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}{ is_now(d, h) ? ' weather-view-now' : is_selected(hourIndex, i, j) ? ' weather-view-selected-hour' : '' }\">{h}</td>\r\n                    {/each}            \r\n                {/each}                            \r\n            </tr>\r\n            <tr>        \r\n                {#each tmp as t, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_tmp(t)}</td>\r\n                {/each}                              \r\n            </tr>\r\n            <tr>        \r\n                {#each ws as s, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_float(s)}</td>\r\n                {/each}                           \r\n            </tr>\r\n            <tr>        \r\n                {#each wd as d, i}\r\n                    <td class=\"{i % hours.length === 0? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_wd(d)}</td>\r\n                {/each}                \r\n            </tr>\r\n            <tr>        \r\n                {#each gust as g, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_float(g)}</td>\r\n                {/each}                 \r\n            <tr>        \r\n                {#each apcp as a, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_float(a)}</td>\r\n                {/each}                \r\n            </tr>\r\n            <tr>        \r\n                {#each rh as h, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_float(h)}</td>\r\n                {/each}                \r\n            </tr>\r\n            <tr>        \r\n                {#each prmsl as p, i}\r\n                    <td class=\"{i % hours.length === 0 ? 'weather-view-margin-cell' : 'weather-view-cell'}\">{format_pressure(p)}</td>\r\n                {/each}                \r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n<style>    \r\n    .weather-view-params,\r\n    .weather-view-values {\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        height: 270px;\r\n    }\r\n    \r\n    .weather-view-values .weather-view-margin-cell {\r\n        border-left: 1px solid #D8E1E8;\r\n    }\r\n    .weather-view-params,    \r\n    .weather-view-values tr:nth-child(1),\r\n    .weather-view-values tr:nth-child(2) {\r\n        background-color: #EBF1F5;\r\n    }\r\n    .weather-view-params tr:first-child td,\r\n    .weather-view-values tr:first-child td {\r\n        border-bottom: 1px solid #D8E1E8;\r\n    }\r\n    .weather-view-params td,\r\n    .weather-view-values td {\r\n        padding: 5px 3px 5px 3px;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        font-family: 'Roboto', sans-serif;\r\n        font-size: 12px;  \r\n        color: #738694;                              \r\n    }\r\n    .weather-view-params .weather-view-current-spot {            \r\n        color: #48AFF0;\r\n        text-align: center;\r\n    }\r\n    .weather-view-params .weather-view-current-spot i {\r\n        background-image: url('coords.png');\r\n        display: inline-block;               \r\n        background-repeat: no-repeat;\r\n        background-color: transparent;\r\n        width: 14px;\r\n        height: 17px;\r\n        margin-left: 15px;\r\n        vertical-align: middle;\r\n    }\r\n    .weather-view-params .weather-view-param {\r\n        text-align: left;\r\n        padding-left: 10px;\r\n    }\r\n    .weather-view-params .weather-view-param,\r\n    .weather-view-params .weather-view-param-unit {        \r\n        word-wrap: none;\r\n    }\r\n    .weather-view-params .weather-view-param-unit {    \r\n        color: #48AFF0;        \r\n        text-align: right;\r\n    }\r\n    .weather-view-values .weather-view-day {\r\n        text-align: center;\r\n        color: #394B59;        \r\n        width: 200px;        \r\n    }\r\n    .weather-view-values .weather-view-hour {\r\n        cursor: pointer;\r\n    }\r\n    .weather-view-values .weather-view-selected-hour {\r\n        color: white;\r\n        background-color: lightblue;\r\n    }\r\n    .weather-view-values .weather-view-now {\r\n        color: white;\r\n        background-color: #48AFF0;\r\n    }\r\n    .weather-view-params .weather-view-close {\r\n        cursor: pointer;        \r\n        text-align: left;\r\n        padding-left: 10px;\r\n    }\r\n    .weather-view-params .weather-view-close i {\r\n        background-image: url('delete.png');\r\n        width: 10px;\r\n        height: 10px;    \r\n        display: inline-block;               \r\n        background-repeat: no-repeat;\r\n        background-color: transparent;        \r\n    }    \r\n</style>\r\n\r\n<script>\r\n    \r\n    import {\r\n        get_task,\r\n        translate,\r\n        format_date,\r\n        format_coord,\r\n        format_float,\r\n        format_pressure,\r\n        format_tmp,\r\n        format_wd,\r\n        is_today,\r\n        is_now,\r\n        FORECAST_PERIOD_HOURS,\r\n        FORECAST_DAYS_NUMBER,\r\n        FORECAST_DAY_HOURS_NUMBER,\r\n        FORECAST_HOURS_STEP,\r\n        FORECAST_DAY_HOURS,\r\n        FORECAST_HOURS,\r\n        FORECAST_VECTOR,\r\n        MS_PER_HOUR,\r\n        WEATHER_LAYERS,\r\n        get_wms_now,\r\n        find_hour_index,\r\n    } from './Utils.js';       \r\n\r\n    const T = window.nsGmx.Translations;    \r\n    T.addText('rus', {\r\n        forecast: 'Прогноз',        \r\n        units: {\r\n            hours: 'Часы',        \r\n            d: '°C',\r\n            mm: 'мм',\r\n            ms: 'м/с',\r\n            mmhg: 'мм рт. ст.',\r\n        },                      \r\n    });\r\n\r\n    T.addText('eng', {    \r\n        forecast: 'Forecast',                  \r\n        units: {\r\n            hours: 'Hours',\r\n            d: '°C',\r\n            mm: 'mm',\r\n            ms: 'm/s',\r\n            mmhg: 'mmHg',\r\n        },        \r\n    });\r\n\r\n    const lpad = n => n < 10 ? `0${n}` : n;   \r\n    \r\n    const to_iso_date = date => `${date.getFullYear()}-${lpad(date.getMonth() + 1)}-${lpad (date.getDate())}`;\r\n\r\n    const create_time_line = features => {\r\n        return features.reduce ((a, f) => {\r\n            const {properties: {ts}} = f;\r\n            const date = new Date(ts * 1000);\r\n            const d = to_iso_date (date);\r\n            const h = date.getHours();\r\n            a[d] = a[d] || {};\r\n            a[d][h] = f;\r\n            return a;\r\n        }, {});\r\n    };\r\n    \r\n    const normalize_time = features => {      \r\n        const t = create_time_line (features);\r\n        return Object.keys(t).sort().reduce((v, k, i) => {\r\n            return Object.keys(t[k]).reduce((a, h) => {\r\n                for (let j = 0; j < FORECAST_DAY_HOURS_NUMBER; ++j) {\r\n                    const x = parseInt(h, 10);\r\n                    if (FORECAST_DAY_HOURS[j] === x) {\r\n                        a[i * FORECAST_DAY_HOURS_NUMBER + j] = t[k][h];\r\n                        break;\r\n                    }\r\n                    else if (FORECAST_DAY_HOURS[j] > x) {\r\n                        a[i * FORECAST_DAY_HOURS_NUMBER + j - 1] = t[k][h];\r\n                        break;\r\n                    }                    \r\n                }\r\n                return a;\r\n            }, v);\r\n        }, FORECAST_VECTOR.slice());\r\n    };\r\n\r\n    const get_param = (result, p) => {\r\n        for(let i = 0; i < result.length; ++i) {\r\n            let {param, features} = result[i];\r\n            if (param === p) {\r\n                return normalize_time (features);\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n\r\n    const is_selected = (index, i, j) => {\r\n        return index === (i * FORECAST_DAY_HOURS_NUMBER + j);\r\n    };\r\n\r\n    const get_popup = ({active, tmp, ws, wd, apcp, prmsl, rh, hourIndex}) => {\r\n        const name = WEATHER_LAYERS[active];\r\n        let h = '';        \r\n        switch (name) {\r\n            case 'tmp':\r\n                return `<div><span>${format_tmp (tmp[hourIndex])}</span><span>${translate('units.d')}</span></div>`;\r\n            case 'wind':                                    \r\n                return `<div><span>${format_float (ws[hourIndex])}</span><span>${translate('units.ms')}</span><span>${format_wd(wd[hourIndex])}</span></div>`;\r\n            case 'precip':\r\n                return `<div><span>${format_float (apcp[hourIndex])}</span><span>${translate('units.mm')}</span></div>`;\r\n            case 'rh':\r\n                return `<div><span>${format_float (rh[hourIndex])}</span><span>%</span></div>`;\r\n            case 'pressure':\r\n                return `<div><span>${format_pressure (prmsl[hourIndex])}</span><span>${translate('units.mmhg')}</span></div>`;\r\n            case 'dewpoint':\r\n                break;\r\n            case 'cloud':\r\n                break;\r\n            default:\r\n                break;\r\n        }                                \r\n        return h;\r\n    };    \r\n\r\n    const get_initial_hour_index = (days, hours) => {\r\n        for (let i = 0, k = 0; i < days.length; ++i){\r\n            const d = days[i];\r\n            for (let j = 0; j < hours.length; ++j, ++k) {\r\n                const h = hours[j];\r\n                if (is_now(d,h)) {\r\n                    return k;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    export default {      \r\n        data() {\r\n            return {\r\n                result: [],\r\n                hours: FORECAST_DAY_HOURS,\r\n                latLng: {lat: null, lng: null},\r\n                hourIndex: -1,\r\n            };\r\n        },\r\n        oncreate() {\r\n            const stop = e => e.stopPropagation();\r\n            this.refs.container.addEventListener('click', stop);\r\n            this.refs.container.addEventListener('mousewheel', stop);\r\n            this.refs.container.addEventListener('mousemove', stop);\r\n            const listener = this.store.on('state', ({changed: {mode}}) => {\r\n                if (mode) {\r\n                    this.hide();\r\n                    if (this._marker) {\r\n                        nsGmx.leafletMap.removeControl(this._marker);\r\n                    }\r\n                }                \r\n            });\r\n\r\n            this.on('destroy', listener.cancel);\r\n            const ctl = L.control.gmxIcon({\r\n                id: 'tl-cloud-cover',\r\n                togglable: true,\r\n                title: translate('forecast')\r\n            })\r\n            .on('statechange', ev => {\r\n                if (ev.target.options.isActive) {\r\n                    nsGmx.leafletMap.getContainer().style.cursor = 'crosshair';\r\n                    nsGmx.leafletMap.on ('click', calc);\r\n                }\r\n                else {\r\n                    nsGmx.leafletMap.off ('click', calc);\r\n                    nsGmx.leafletMap.getContainer().style.cursor = '';\r\n                    if (this._marker) {\r\n                        nsGmx.leafletMap.removeControl(this._marker);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const calc = ev => {                \r\n                const {latlng: {lat, lng}} = ev;                \r\n                const { mode, moment, active } = this.store.get();                \r\n                if (mode && lat && lng) {                                   \r\n                    if (this._marker) {\r\n                        nsGmx.leafletMap.removeControl(this._marker);\r\n                    }\r\n                    const icon = L.divIcon({className: 'weather-view-marker'});\r\n                    this._marker = L.marker({lat, lng}, {icon});                        \r\n                    nsGmx.leafletMap.addControl(this._marker);\r\n                    nsGmx.widgets.notifications.startAction('WeatherView');                \r\n                    const tasks = ['temperature', 'wind', 'precipitation', 'pressure', 'humidity'].map(param => {\r\n                        return get_task ({mode, param, lat, lng, hours: FORECAST_PERIOD_HOURS});\r\n                    });                    \r\n                    Promise.all(tasks)\r\n                    .then (result => {\r\n                        nsGmx.widgets.notifications.stopAction('WeatherView', 'success');                                                            \r\n                        window.iconSidebarWidget.open(\"weather-pane\");\r\n\r\n                        this.set({result, latLng: {lat, lng}});\r\n\r\n                        if (0 <= active && active < WEATHER_LAYERS.length) { \r\n                            const {tmp, ws, wd, apcp, prmsl, rh, hourIndex, days, hours} = this.get();\r\n                            const i = hourIndex < 0 ? get_initial_hour_index(days, hours) : hourIndex;\r\n                            this._marker.bindPopup(get_popup ({active, tmp, ws, wd, apcp, prmsl, rh, hourIndex: i}), {className: 'weather-view-popup'}).openPopup();\r\n                        }                          \r\n                        this.show();\r\n                    })\r\n                    .catch(e => {       \r\n                        if (this._marker) {\r\n                            nsGmx.leafletMap.removeControl(this._marker);\r\n                        }                 \r\n                        console.log(e);                        \r\n                        this.set({result: []});\r\n                        nsGmx.widgets.notifications.stopAction('WeatherView', 'fail');                        \r\n                    }); \r\n                }\r\n\r\n                // nsGmx.leafletMap.off('click', calc);\r\n                // ctl.setActive(false);\r\n            };\r\n            nsGmx.leafletMap.addControl(ctl);\r\n        },\r\n        ondestroy() {\r\n            this.refs.container.removeEventListener('click');\r\n            this.refs.container.removeEventListener('mousewheel');\r\n            this.refs.container.removeEventListener('mousemove');\r\n        },\r\n        computed: {          \r\n            tmp: ({result}) => {   \r\n                return get_param(result, 'temperature').map(f => f && f.properties.tmp || null);\r\n            },\r\n            ws: ({wind}) => wind.wind,\r\n            wd: ({wind}) => wind.wd,\r\n            gust: ({wind}) => wind.gust,\r\n            apcp: ({result}) => {\r\n                return get_param (result, 'precipitation').map(f => f && f.properties.precip || null);\r\n            },\r\n            prmsl: ({result}) => {\r\n                return get_param (result, 'pressure').map(f => f && f.properties.pressure || null);\r\n            },\r\n            wind: ({result}) => {                \r\n                return get_param (result, 'wind').reduce((a, f) => {\r\n                    if (f) {\r\n                        const {properties: {wind, wd, gust}} = f;\r\n                        a.wind = a.wind.concat(wind);\r\n                        a.wd = a.wd.concat(wd);\r\n                        a.gust = a.gust.concat(gust);\r\n                    }\r\n                    else {\r\n                        a.wind = a.wind.concat(null);\r\n                        a.wd = a.wd.concat(null);\r\n                        a.gust = a.gust.concat(null);\r\n                    }\r\n                    return a;\r\n                }, {wind: [], wd: [], gust: []});\r\n            }, \r\n            rh: ({result}) =>  {\r\n                return get_param(result, 'humidity').map(f => f && f.properties.rh || null);\r\n            },\r\n            days: ({times}) => {\r\n                if (times.length > 0) {\r\n                    const ds = times.reduce((a, ts) => {\r\n                            const t = new Date(ts * 1000);\r\n                            const d = to_iso_date (t);\r\n                            a[d] = new Date(d);\r\n                            return a;\r\n                        }, {});\r\n                    return Object.keys(ds).map (k => ds[k]);\r\n                }\r\n                else {\r\n                    return new Array(FORECAST_DAYS_NUMBER);\r\n                }\r\n            },\r\n            times: ({result}) => {\r\n                return result.reduce((a,{features}) => {\r\n                    return features.reduce((b,{properties: {ts}}) => b.concat(ts), a);                    \r\n                }, []).sort();\r\n            },\r\n        },\r\n        methods: {\r\n            show () {\r\n                this.refs.container.style.display = 'flex';\r\n            },            \r\n            hide () {                \r\n                this.refs.container.style.display = 'none';\r\n            },\r\n            selectHour (day, hour, i, j) {\r\n                const { mode } = this.store.get();\r\n                const { latLng: {lat, lng} } = this.get();\r\n                const now = new Date(day.getFullYear(), day.getMonth(), day.getDate(), hour);\r\n                this.set({hourIndex: i * FORECAST_DAY_HOURS_NUMBER + j});\r\n                get_wms_now (mode, lat, lng, now)\r\n                .then(moment => {\r\n                    this.store.set({moment});\r\n                })\r\n                .catch(e => {\r\n                    console.log (e);\r\n                });                                                                \r\n            },\r\n        },\r\n        helpers: {\r\n            translate,\r\n            format_coord,\r\n            format_date,\r\n            format_tmp,\r\n            format_wd,\r\n            format_float,\r\n            format_pressure,\r\n            is_selected,\r\n            is_now,\r\n        },\r\n    };\r\n</script>"
  ],
  "names": [],
  "mappings": "AA0BI,mCAAoB,CAAC,eAAE,CAAC,AACpB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,CACjC,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,mCAAoB,CAAC,cAAc,eAAC,CAAC,AACjC,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,AAChC,CAAC,AACD,mCAAoB,CAAC,cAAc,CAAC,oBAAK,CACzC,mCAAoB,CAAC,cAAc,CAAC,MAAM,eAAC,CAAC,AACxC,cAAc,CAAE,MAAM,AAC1B,CAAC,AACD,mCAAoB,CAAC,cAAc,CAAC,MAAM,eAAC,CAAC,AACxC,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,mCAAoB,CAAC,EAAE,eAAC,CAAC,AACrB,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAC5B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,AACtB,CAAC,AACD,mCAAoB,CAAC,EAAE,eAAC,CAAC,AACrB,OAAO,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AAC5B,CAAC,AACD,mCAAoB,CAAC,4BAAa,CAClC,mCAAoB,CAAC,WAAW,eAAC,CAAC,AAC9B,OAAO,CAAE,YAAY,CACrB,iBAAiB,CAAE,SAAS,CAC5B,gBAAgB,CAAE,WAAW,CAC7B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,MAAM,AAC1B,CAAC,AACD,mCAAoB,CAAC,WAAW,eAAC,CAAC,AAC9B,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,mCAAoB,CAAC,YAAY,eAAC,CAAC,AAC/B,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,MAAM,AAC1B,CAAC,AACD,mCAAoB,CAAC,0BAA0B,eAAC,CAAC,AAC7C,gBAAgB,CAAE,IAAI,SAAS,CAAC,AACpC,CAAC,AACD,mCAAoB,CAAC,wBAAwB,eAAC,CAAC,AAC3C,gBAAgB,CAAE,IAAI,gBAAgB,CAAC,AAC3C,CAAC,AACD,mCAAoB,CAAC,2BAA2B,eAAC,CAAC,AAC9C,gBAAgB,CAAE,IAAI,UAAU,CAAC,AACrC,CAAC,AACD,mCAAoB,CAAC,yBAAyB,eAAC,CAAC,AAC5C,gBAAgB,CAAE,IAAI,iBAAiB,CAAC,AAC5C,CAAC,AACD,mCAAoB,CAAC,6BAA6B,eAAC,CAAC,AAChD,gBAAgB,CAAE,IAAI,YAAY,CAAC,AACvC,CAAC,AACD,mCAAoB,CAAC,2BAA2B,eAAC,CAAC,AAC9C,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,AAC9C,CAAC,AACD,mCAAoB,CAAC,2BAA2B,eAAC,CAAC,AAC9C,gBAAgB,CAAE,IAAI,UAAU,CAAC,AACrC,CAAC,AACD,mCAAoB,CAAC,yBAAyB,eAAC,CAAC,AAC5C,gBAAgB,CAAE,IAAI,iBAAiB,CAAC,AAC5C,CAAC,AACD,mCAAoB,CAAC,+BAA+B,eAAC,CAAC,AAClD,gBAAgB,CAAE,IAAI,cAAc,CAAC,AACzC,CAAC,AACD,mCAAoB,CAAC,6BAA6B,eAAC,CAAC,AAChD,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,AAChD,CAAC,AACD,mCAAoB,CAAC,4BAA4B,eAAC,CAAC,AAC/C,gBAAgB,CAAE,IAAI,WAAW,CAAC,AACtC,CAAC,AACD,mCAAoB,CAAC,0BAA0B,eAAC,CAAC,AAC7C,gBAAgB,CAAE,IAAI,kBAAkB,CAAC,AAC7C,CAAC,AACD,mCAAoB,CAAC,yBAAyB,eAAC,CAAC,AAC5C,gBAAgB,CAAE,IAAI,QAAQ,CAAC,AACnC,CAAC,AACD,mCAAoB,CAAC,uBAAuB,eAAC,CAAC,AAC1C,gBAAgB,CAAE,IAAI,eAAe,CAAC,AAC1C,CAAC,AACD,mCAAoB,CAAC,+BAA+B,eAAC,CAAC,AAClD,gBAAgB,CAAE,IAAI,cAAc,CAAC,AACzC,CAAC,AACD,mCAAoB,CAAC,6BAA6B,eAAC,CAAC,AAChD,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,AAChD,CAAC,AACD,mCAAoB,CAAC,sBAAsB,eAAC,CAAC,AACzC,gBAAgB,CAAE,IAAI,aAAa,CAAC,AACxC,CAAC,AACD,mCAAoB,CAAC,oBAAoB,eAAC,CAAC,AACvC,gBAAgB,CAAE,IAAI,oBAAoB,CAAC,AAC/C,CAAC,AACD,mCAAoB,CAAC,mBAAmB,eAAC,CAAC,AACtC,KAAK,CAAE,OAAO,AAClB,CAAC,AACD,mCAAoB,CAAC,iBAAE,CACvB,mCAAoB,CAAC,OAAO,eAAC,CAAC,AAC1B,MAAM,CAAE,IAAI,AAChB,CAAC,AACD,mCAAoB,CAAC,YAAY,eAAC,CAAC,AAC/B,OAAO,CAAE,YAAY,CACrB,iBAAiB,CAAE,SAAS,CAC5B,gBAAgB,CAAE,WAAW,CAC7B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,MAAM,AAC1B,CAAC,AACD,mCAAoB,CAAC,WAAW,eAAC,CAAC,AAC9B,gBAAgB,CAAE,IAAI,gBAAgB,CAAC,AAC3C,CAAC,AACD,mCAAoB,CAAC,YAAY,eAAC,CAAC,AAC/B,gBAAgB,CAAE,IAAI,iBAAiB,CAAC,AAC5C,CAAC,AACD,mCAAoB,CAAC,cAAc,eAAC,CAAC,AACjC,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,AAC9C,CAAC,AACD,mCAAoB,CAAC,UAAU,eAAC,CAAC,AAC7B,gBAAgB,CAAE,IAAI,eAAe,CAAC,AAC1C,CAAC,AACD,mCAAoB,CAAC,gBAAgB,eAAC,CAAC,AACnC,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,AAChD,CAAC,AACD,mCAAoB,CAAC,gBAAgB,eAAC,CAAC,AACnC,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,AAChD,CAAC,AACD,mCAAoB,CAAC,aAAa,eAAC,CAAC,AAChC,gBAAgB,CAAE,IAAI,kBAAkB,CAAC,AAC7C,CAAC;ACpDD,kCAAoB,CACpB,oBAAoB,cAAC,CAAC,AAClB,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,KAAK,AACjB,CAAC,AAED,kCAAoB,CAAC,yBAAyB,cAAC,CAAC,AAC5C,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAClC,CAAC,AACD,kCAAoB,CACpB,kCAAoB,CAAC,gBAAE,WAAW,CAAC,CAAC,CACpC,kCAAoB,CAAC,gBAAE,WAAW,CAAC,CAAC,AAAC,CAAC,AAClC,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AACD,kCAAoB,CAAC,EAAE,YAAY,CAAC,gBAAE,CACtC,kCAAoB,CAAC,EAAE,YAAY,CAAC,EAAE,cAAC,CAAC,AACpC,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACpC,CAAC,AACD,kCAAoB,CAAC,gBAAE,CACvB,kCAAoB,CAAC,EAAE,cAAC,CAAC,AACrB,OAAO,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CACxB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,CACjC,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAClB,CAAC,AACD,kCAAoB,CAAC,0BAA0B,cAAC,CAAC,AAC7C,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,kCAAoB,CAAC,0BAA0B,CAAC,CAAC,cAAC,CAAC,AAC/C,gBAAgB,CAAE,IAAI,YAAY,CAAC,CACnC,OAAO,CAAE,YAAY,CACrB,iBAAiB,CAAE,SAAS,CAC5B,gBAAgB,CAAE,WAAW,CAC7B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,MAAM,AAC1B,CAAC,AACD,kCAAoB,CAAC,mBAAmB,cAAC,CAAC,AACtC,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,IAAI,AACtB,CAAC,AACD,kCAAoB,CAAC,iCAAmB,CACxC,kCAAoB,CAAC,wBAAwB,cAAC,CAAC,AAC3C,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,kCAAoB,CAAC,wBAAwB,cAAC,CAAC,AAC3C,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,KAAK,AACrB,CAAC,AACD,kCAAoB,CAAC,iBAAiB,cAAC,CAAC,AACpC,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,OAAO,CACd,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,kCAAoB,CAAC,kBAAkB,cAAC,CAAC,AACrC,MAAM,CAAE,OAAO,AACnB,CAAC,AACD,kCAAoB,CAAC,2BAA2B,cAAC,CAAC,AAC9C,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,SAAS,AAC/B,CAAC,AACD,kCAAoB,CAAC,iBAAiB,cAAC,CAAC,AACpC,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AACD,kCAAoB,CAAC,mBAAmB,cAAC,CAAC,AACtC,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,IAAI,AACtB,CAAC,AACD,kCAAoB,CAAC,mBAAmB,CAAC,CAAC,cAAC,CAAC,AACxC,gBAAgB,CAAE,IAAI,YAAY,CAAC,CACnC,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,YAAY,CACrB,iBAAiB,CAAE,SAAS,CAC5B,gBAAgB,CAAE,WAAW,AACjC,CAAC"
}